Description: replace ava by tape
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-05-05

--- a/test.js
+++ b/test.js
@@ -1,12 +1,12 @@
-import fs from 'fs';
-import path from 'path';
-import {EventEmitter} from 'events';
-import test from 'ava';
-import delay from 'delay';
-//import isCi from 'is-ci';
-import {Server as KarmaServer} from 'karma';
-//import browser from './browser';
-import node from './';
+const fs = require('fs');
+const path = require('path');
+const {EventEmitter} = require('events');
+const test = require('tape');
+const delay = require('delay');
+//const isCi = require('is-ci');
+//const {Server as KarmaServer} = require('karma');
+//const browser = require('./browser');
+const node = require('./');
 
 const implementations = {node};
 
@@ -97,6 +97,7 @@
 
 		t.is(currentlyUnhandled().length, 2);
 		t.deepEqual(messages(), ['foo', 'bar']);
+        t.end();
 	});
 
 	function removalMacro(t, index, expected) {
@@ -115,17 +116,18 @@
 		mock.handled(events[index]);
 
 		t.deepEqual(messages(), expected);
+        t.end();
 	}
 
-	test(`${type}: removes promises as they are handled (from beginning)`, removalMacro, 0, ['bar', 'baz']);
-	test(`${type}: removes promises as they are handled (from middle)`, removalMacro, 1, ['foo', 'baz']);
-	test(`${type}: removes promises as they are handled (from middle)`, removalMacro, 2, ['foo', 'bar']);
+	test('removes promises as they are handled (from beginning)', t => {removalMacro(t, 0, ['bar', 'baz'])});
+	test('removes promises as they are handled (from middle)', t => {removalMacro(t, 1, ['foo', 'baz'])});
+	test('removes promises as they are handled (from middle)', t => {removalMacro(t, 2, ['foo', 'bar'])});
 }
 
 //generateTests('browser');
 generateTests('node');
 
-test.serial('node: works as advertised', async t => {
+test('node: works as advertised', async t => {
 	var currentlyUnhandled = node();
 	var messages = messagesHelper(currentlyUnhandled);
 
@@ -144,6 +146,7 @@
 	p2.catch(() => {});
 	await delay(10);
 	t.deepEqual(messages(), []);
+    t.end();
 });
 
 function browserMacro(t, file, browsers) {
